//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package zetasql;

import "zetasql/public/simple_value.proto";

option java_package = "com.google.zetasql";
option java_outer_classname = "ZetaSQLTypeParameters";

// Type parameters for erasable types, for example STRING(L) is a erasable
// string type with a type parameter L.
//
// Types built on the type extension framework can store parameters in the
// <extended_type_parameters> field.
//
// Erasable types can only be used in DDL, cast expressions, and script variable
// declarations.
//
// Type parameters are not propagated to SQL expression results. For example,
// "SELECT cast(x as STRING(10))" returns a STRING type instead of STRING(10)
// type. Engines should erase type parameters in the query result type.
//
message TypeParametersProto {
  oneof type_parameters {
    StringTypeParametersProto string_type_parameters = 1;
    NumericTypeParametersProto numeric_type_parameters = 2;
    ExtendedTypeParametersProto extended_type_parameters = 3;
  }
  // Store type parameters for subfields for ARRAY/STRUCT types
  // For ARRAY:
  //   If the element or its subfield has type parameters, then
  //   child_list.size() is 1, and child_list(0) stores the element type
  //   parameters.
  //   Otherwise child_list is empty.
  // For STRUCT:
  //   If the i-th field has type parameters then child_list(i) is the field
  //   type parameters.
  //   If the i-th field has no type parameters, then child_list[i] contains an
  //   empty TypeParameter. The size of the child_list is equal to either the
  //   number of fields or 0.
  //   If none of the fields and none of their subfields has type parameters,
  //   then child_list is empty.
  // For other types, child_list is empty.
  repeated TypeParametersProto child_list = 100;
}

// Type parameters for STRING and BYTES type.
message StringTypeParametersProto {
  oneof param {
    // For STRING, it means maximum length in characters of a UTF-8 String.
    // For BYTES, it means maximum number of bytes.
    int64 max_length = 1;

    // True if type is STRING(MAX) or BYTES(MAX). Engines define the value of
    // MAX.
    bool is_max_length = 2;
  }
}

// Type parameters for NUMERIC and BIGNUMERIC type.
message NumericTypeParametersProto {
  // Engine specific extensions.
  extensions 1000 to 2000;
  oneof precision_param {
    // Precision is the number of total digits (base 10).
    // For NUMERIC, max(1, scale) <= precision <= (29 + scale).
    // For BIGNUMERIC, max(1, scale) <= precision <= (38 + scale) or MAX.
    int64 precision = 1;

    // Represents BIGNUMRIC(MAX) or BIGNUMERIC(MAX, S).
    // The MAX literal enables the full range of integral part of BIGNUMERIC.
    // BIGNUMERIC(38) only allow value up to 10^38, while BIGNUMERIC(39) is a
    // invalid type. BIGNUMERIC(MAX) fills the gap by allowing value up to
    // 5.7896 * 10^38 to use the full value range of BIGNUMERIC.
    bool is_max_precision = 2;
  }

  // Scale is the number of digits in the fractional part (base 10). Can be
  // specified only if precision is specified. If unspecified, scale is
  // interpreted as 0, i.e. NUMERIC(P) = NUMERIC(P,0).
  //
  // When casting a number to NUMERIC(P,S), if the number has more than S
  // fractional digits, it will be rounded to S fractional digits.
  //
  // For NUMERIC, 0 <= scale <= 9
  // For BIGNUMERIC, 0 <= scale <= 38
  optional int64 scale = 3;
}

// Type parameters for engine-defined types.
message ExtendedTypeParametersProto {
  repeated SimpleValueProto parameters = 1;
}
