name: Base Workflow

on:
  workflow_call:
    inputs:
      cpp-repo-name:
        required: true
        type: string
      npm-package-name:
        required: true
        type: string
      tag:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}

    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}

    strategy:
      matrix:
        include:
          - os: macos-latest
            working-directory: build/zetasql-macos
            cache-path: build/zetasql-macos/bazel-bin/zetasql/local_service/libremote_server.dylib
            build-commands: |
              npx @bazel/bazelisk build --copt "-O3" --config=clang //zetasql/local_service:libremote_server.dylib
              install_name_tool -id "@loader_path/libremote_server.dylib" bazel-bin/zetasql/local_service/libremote_server.dylib

          - os: ubuntu-20.04
            working-directory: build/zetasql-linux
            cache-path: build/zetasql-linux/bazel-bin/zetasql/local_service/libremote_server.so
            build-commands: npx @bazel/bazelisk build --copt "-O3" //zetasql/local_service:libremote_server.so

    steps:
      - name: checkout C++ library
        uses: actions/checkout@v3
        with:
          repository: fivetran/${{ inputs.cpp-repo-name }}
          path: ${{ matrix.working-directory }}

      - name: set variables
        id: vars
        working-directory: ${{ matrix.working-directory }}
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo $(git rev-parse --short HEAD)

      - name: cache zetasql build
        id: cache-zetasql-build
        uses: actions/cache@v3
        with:
          path: ${{ matrix.cache-path }}
          key: ${{ matrix.os }}-${{ steps.vars.outputs.sha_short }}-6

      - name: build
        if: steps.cache-zetasql-build.outputs.cache-hit != 'true'
        working-directory: ${{ matrix.working-directory }}
        run: |
          ${{ matrix.build-commands }}

      - name: upload build result
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.cpp-repo-name }}-${{ matrix.os }}
          path: ${{ matrix.cache-path }}

  package:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: checkout zetasql-npm
        uses: actions/checkout@v3
        with:
          path: build/zetasql-npm

      - name: load linux build
        uses: actions/cache@v3
        with:
          path: build/zetasql-linux/bazel-bin/zetasql/local_service/libremote_server.so
          key: ubuntu-20.04-${{ needs.build.outputs.sha_short }}-6

      - name: load macos build
        uses: actions/cache@v3
        with:
          path: build/zetasql-macos/bazel-bin/zetasql/local_service/libremote_server.dylib
          key: macos-latest-${{ needs.build.outputs.sha_short }}-6

      - name: copy files
        working-directory: build
        run: |
          mkdir -p zetasql-npm/${{ inputs.npm-package-name }}/lib/zetasql
          cp zetasql-macos/bazel-bin/zetasql/local_service/libremote_server.dylib zetasql-npm/${{ inputs.npm-package-name }}/lib/zetasql/
          tar -xzvf zetasql-npm/${{ inputs.npm-package-name }}/bin/darwin-arm-64/libremote_server_arm.dylib.tar.gz -C zetasql-npm/${{ inputs.npm-package-name }}/lib/zetasql/
          tar -xzvf zetasql-npm/${{ inputs.npm-package-name }}/bin/linux-arm-64/libremote_server_arm.so.tar.gz -C zetasql-npm/${{ inputs.npm-package-name }}/lib/zetasql/
          cp zetasql-linux/bazel-bin/zetasql/local_service/libremote_server.so zetasql-npm/${{ inputs.npm-package-name }}/lib/zetasql/
          cp -R zetasql-npm/${{ inputs.npm-package-name }}/src/protos zetasql-npm/${{ inputs.npm-package-name }}/lib/protos

      - name: build and test
        working-directory: build/zetasql-npm/${{ inputs.npm-package-name }}
        run: |
          echo ${{ github.ref }}
          npm install --prefix ..
          npm run build
          npm run lint

      - name: cache package results
        uses: actions/cache@v3
        with:
          path: build/zetasql-npm
          key: package-results-${{ inputs.npm-package-name }}-${{ github.sha }}-${{ github.ref }}

  # e2e-macos:
  #   needs: package
  #   runs-on: macos-latest

  #   steps:
  #     - name: load package results
  #       uses: actions/cache@v3
  #       with:
  #         path: build/zetasql-npm
  #         key: package-results-${{ inputs.npm-package-name }}-${{ github.sha }}-${{ github.ref }}

  #     - name: delete libraries for other platforms
  #       run: find ./build/zetasql-npm/${{ inputs.npm-package-name }}/lib/zetasql ! -name 'libremote_server.dylib' -type f -exec rm -f {} +

  #     - name: run e2e test
  #       working-directory: build/zetasql-npm/${{ inputs.npm-package-name }}
  #       run: |
  #         npm ci --prefix ..
  #         ./e2e.sh

  # e2e-linux:
  #   needs: package
  #   runs-on: ubuntu-20.04

  #   steps:
  #     - name: set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: set up docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: available platforms
  #       run: echo ${{ steps.buildx.outputs.platforms }}

  #     - name: load package results
  #       uses: actions/cache@v3
  #       with:
  #         path: build/zetasql-npm
  #         key: package-results-${{ inputs.npm-package-name }}-${{ github.sha }}-${{ github.ref }}

  #     - name: delete libraries for other platforms
  #       run: find ./build/zetasql-npm/${{ inputs.npm-package-name }}/lib/zetasql ! -name '*.so' -type f -exec rm -f {} +

  #     - name: run e2e test
  #       working-directory: build/zetasql-npm
  #       run: docker buildx build --build-arg package_name=${{ inputs.npm-package-name }} --platform=linux/amd64,linux/arm64 --progress=plain --no-cache .

  publish-npm:
    runs-on: ubuntu-20.04
    # if: startsWith(github.ref, format('refs/tags/{0}', inputs.tag))
    needs: [build, package] #, e2e-macos, e2e-linux]
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
    steps:
      - name: load package results
        uses: actions/cache@v3
        with:
          path: build/zetasql-npm
          key: package-results-${{ inputs.npm-package-name }}-${{ github.sha }}-${{ github.ref }}

      - uses: actions/setup-node@v3
        with:
          node-version: '19.x'
          registry-url: 'https://registry.npmjs.org'
          always-auth: true

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3

      - name: publish
        working-directory: build/zetasql-npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc
          npm config set registry https://registry.npmjs.org
          npm publish --workspace=${{ inputs.npm-package-name }} --verbose

  update-lib-archives:
    needs: build

    runs-on: ubuntu-20.04
    steps:
      - name: checkout zetasql-npm
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.cpp-repo-name }}-ubuntu-20.04

      - uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.cpp-repo-name }}-macos-latest

      - run: |
          mkdir -p old
          tar -xzvf ${{ inputs.npm-package-name }}/bin/darwin-x86-64/libremote_server.dylib.tar.gz -C old
          tar -xzvf ${{ inputs.npm-package-name }}/bin/linux-x86-64/libremote_server.so.tar.gz -C old

          if ! diff -q libremote_server.dylib old/libremote_server.dylib &>/dev/null; then
            tar -zcf ${{ inputs.npm-package-name }}/bin/darwin-x86-64/libremote_server.dylib.tar.gz libremote_server.dylib
          fi

          if ! diff -q libremote_server.so old/libremote_server.so &>/dev/null; then
            tar -zcf ${{ inputs.npm-package-name }}/bin/linux-x86-64/libremote_server.so.tar.gz libremote_server.so
          fi

      - uses: EndBug/add-and-commit@v9
        with:
          add: '${{ inputs.npm-package-name }}/bin'
          message: 'update artifacts'
